name: CMake on multiple platforms

on:
  push:
    branches: [ "release" ]
  pull_request:
    branches: [ "release" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++

    steps:
    - uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.5.4
      with:
        ssh-private-key: ${{ secrets.ACTIONS_DEPLOY_KEY }}

    - name: Install dependencies on Ubuntu
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgtk-3-dev \
          libfreetype6-dev \
          libx11-dev \
          libxinerama-dev \
          libxrandr-dev \
          libxcursor-dev \
          mesa-common-dev \
          libasound2-dev \
          freeglut3-dev \
          libxcomposite-dev \
          libcurl4-openssl-dev \
          libwebkit2gtk-4.0-37 \
          libwebkit2gtk-4.0-dev

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "artifact-name=${{ matrix.os }}-${{ matrix.build_type }}.zip" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build the project
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }}

    - name: Compress build artifacts
      if: success()
      run: |
        zip -r ${{ steps.strings.outputs.artifact-name }} ${{ steps.strings.outputs.build-output-dir }}/amigaMon_artefacts/Release

    - name: Upload build artifacts
      if: success()
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.strings.outputs.artifact-name }}
        path: ${{ steps.strings.outputs.artifact-name }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download artifacts from build jobs
      uses: actions/download-artifact@v3
      with:
        path: ./artifacts

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          Automated release for ${{ github.ref_name }}.
        draft: false
        prerelease: false

    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts
        asset_name: ${{ matrix.os }}-${{ matrix.build_type }}-${{ github.ref_name }}.zip
        asset_content_type: application/zip